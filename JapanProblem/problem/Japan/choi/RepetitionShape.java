package problem.Japan.choi;

import java.util.Arrays;
import java.util.Scanner;

public class RepetitionShape {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner sc = new Scanner(System.in);
		
		int K = Integer.parseInt(sc.nextLine());
		int N = Integer.parseInt(sc.nextLine());
		char[][] shape = new char[N][N];
		
		for(int i=0; i < N; i++) {
			shape[i] = sc.nextLine().toCharArray(); 
		}
		
		for(int i=0; i < K; i++) {
			shape = repetition(shape);
		}
		
		int sizeS = shape.length;
		for(int i=0; i < sizeS; i++) {
			for(int j=0; j < sizeS; j++) {
				System.out.print(shape[i][j]);
			}
			System.out.print("\n");
		}

	}
	public static char[][] repetition(char[][] shape) {
		int sizeS = shape.length;
		int sizeR = sizeS*sizeS;
		char[][] result = new char[sizeR][sizeR];
		
		for(int i=0; i < sizeS; i++) {
			for(int j=0; j < sizeS; j++) {
				if(shape[i][j] == '.') {
					for(int m=0; m < sizeS; m++) {
						for(int n=0; n < sizeS; n++) {
							result[i*sizeS + m][j*sizeS + n] = '.';
						}
					}
				} else {
					for(int m=0; m < sizeS; m++) {
						for(int n=0; n < sizeS; n++) {
							result[i*sizeS + m][j*sizeS + n] = shape[m][n];
						}
					}
				}
			}
		}
		
		return result;
	}

}


//綺麗な模様を描きたいと思ったあなたは、以下のような繰り返し図形の生成方法を思いつきました。
//
//
//まず、辺の長さが 1 の白色もしくは青色の正方形を N × N 個並べて、辺の長さが N の模様を作ります。
//
//これは入力として与えられます。
//
//図 1 に N ＝ 2 のときの入力の例を示します。
//
//
//図1 
//模様を構成する各正方形が、
//
//白である場合は、もとの模様と同じ大きさの白い正方形で、
//
//青である場合は、もとの模様で置き換えることで、新しい模様を生成します。
//
//この生成手順を図 2 に示します。
//
//
//・赤色で囲まれた正方形は青色であるため、もとの模様に置き換えます。
//
//・緑色で囲まれた正方形は白色であるため、もとの模様と同じ大きさの白色の正方形で置き換えます。
//
//・橙色で囲まれた正方形および黄色で囲まれた正方形は、赤色で囲まれた正方形と同様、もとの模様に置き換えます。
//
//
//結果として、辺の長さが N × N の模様が生成されます。
//
//
//図2 
//この生成手順を K 回繰り返します。
//
//K = 2 の場合の最終的な結果を図 3 に表します。
//
//
//図3


//入力される値
//入力は以下のフォーマットで与えられます。
//
//K
//N
//s_1
//s_2
//...
//s_N
//・1 行目には生成手順を繰り返す回数を表す整数 K が与えられます。
//・2 行目には、最初に与えられる正方形の辺の長さを表す整数 N が与えられます。
//・続く N 行のうちの i 行目 (1 ≦ i ≦ N) には、半角記号 "#" および "." からなる長さ N の文字列 si が与えられます。 si の j 番目 (1 ≦ j ≦ N) の文字は初期状態における上から i 番目、左から j 番目の正方形の色に対応しており、"#" は水色を、"." は白色を表します。
//・入力は N + 2 行となり、入力値最終行の末尾に改行が 1 つ入ります。
//
//それぞれの値は文字列で標準入力から渡されます。標準入力からの値取得方法はこちらをご確認ください


//期待する出力
//・期待する出力は最終的に生成された模様の一辺の長さと同じ行数 (= M) になります。
//
//・i 行目 (1 ≦ i ≦ M) には生成された模様の i 行目を入力と同じように出力してください。
//
//出力の最後に改行を入れ、余計な文字、空行を含んではいけません。



//条件
//すべてのテストケースにおいて、以下の条件をみたします。
//
//・1 ≦ K ≦ 3
//・1 ≦ N ≦ 5
//・K = 3 のときは N ≦ 2
//・s_i は半角記号 "#", "." のいずれかで構成される文字列 (1 ≦ i ≦ N)


//入力例1
//2
//2
//#.
//##
//出力例1
//#...............
//##..............
//#.#.............
//####............
//#...#...........
//##..##..........
//#.#.#.#.........
//########........
//#.......#.......
//##......##......
//#.#.....#.#.....
//####....####....
//#...#...#...#...
//##..##..##..##..
//#.#.#.#.#.#.#.#.
//################
//入力例2
//1
//3
//#.#
//.#.
//#.#
//出力例2
//#.#...#.#
//.#.....#.
//#.#...#.#
//...#.#...
//....#....
//...#.#...
//#.#...#.#
//.#.....#.
//#.#...#.#