package problem.Japan.choi;

import java.util.Scanner;

public class LatestGotoWorkTime {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int a = sc.nextInt();
		int b = sc.nextInt();
		int c = sc.nextInt();
		int N = sc.nextInt();
		int[][] train = new int[N][2];
		for(int i=0; i < N; i++) {
			train[i][0] = sc.nextInt();
			train[i][1] = sc.nextInt();
		}
		
		int latestC = 60 - c - b;
		int latestBh = 0, latestBm = 0;
		for(int i=N-1; i >= 0; i--) {
			if(latestC != 0) {
				if(train[i][1] < latestC) {
					latestBh = train[i][0];
					latestBm = train[i][1];
					break;
				}
			} else {
				if(train[i][0] < 8) {
					latestBh = train[i][0];
					latestBm = train[i][1];
					break;
				}
			}
		}
		int latestA = latestBm-a;
		if(latestA < 0) {
			latestBh --;
			latestA += 60;			
		}
		if(latestA < 10) {
			System.out.println("0" + latestBh + ":0" + latestA);
		} else {
			System.out.println("0" + latestBh + ":" + latestA);
		}
		

	}

}

//平日の朝、できるだけ長く寝ていたいと思ったあなたは、「何時に家を出発すれば遅刻せずに出社できるか？」ということを常々考えています。
//
//あなたの通勤ルートは次のようになっています。
//
//1. 自宅から配座（ぱいざ）駅まで a 分間歩く。
//2. 配座駅に着いた後、一番早く来た電車に b 分間電車に乗って儀野（ぎの）駅に到着する。
//　(駅に到着してから電車に乗り込むまでの時間は考慮せず、駅に到着した時刻の電車にも乗り込めるものとします)
//3. 儀野駅から会社まで c 分間歩く。
//
//図
//
//あなたの会社では 8:59 までに出社すれば遅刻扱いにはなりません。 何時に自宅を出れば遅刻せずに出社できるでしょうか？
//このような時間の中で最も遅い時刻を求めるプログラムを書いてください。
//
//例えば、以下の入力例1の場合
//入力例1
//30 30 10
//3
//6 0
//7 0
//8 0
//配座駅には 6:00, 7:00, 8:00 に電車が来ます。 
//7:30 に自宅を出れば 8:00 の電車に乗ることができて、8:40 に出社できます。
//よって出力は以下のようになります。
//
//出力例1
//07:30


//入力される値
//入力は以下のフォーマットで与えられます。
//
//a b c　　#配座駅へまで時間 a 分, 配座駅から儀野駅の乗車時間 b 分, 儀野駅から会社までの時間 c 分
//N　　　　#配座駅から出る電車の本数を表す整数 N 
//h_1 m_1　#1本目の電車の発車時刻 h_1 時 m_1 分
//h_2 m_2　#2本目の電車の発車時刻 h_2 時 m_2 分
//...
//h_N m_N　#N本目の電車の発車時刻 h_N 時 m_N 分
//1 行目には 3 つの整数 a, b, c が入力されます。これらは通勤ルートの各ステップにかかる時間（単位は分）を表します。 
//
//2 行目には配座駅から出る電車の本数を表す整数 N が入力されます。 
//続く N 行は各電車の発車時刻を表しています。 すなわち、i = 1, 2, ..., N に対し、h_i 時 m_i 分に配座駅を発車する電車があることを表します。
//
//入力値最終行の末尾に改行が１つ入ります。
//文字列は標準入力から渡されます。標準入力からの値取得方法はこちらをご確認ください


//期待する出力
//自宅を出発する最も遅い時刻を h 時 m 分とするとき
//h, m が 1 桁の数のときは、2 桁になるように先頭を 0 で埋め以下の様な形式で出力してください。 
//hh:mm　　　#自宅を出発する最も遅い時間 hh(0埋め二桁) 時 mm(0埋め二桁) 分
//
//最後は改行し、余計な文字、空行を含んではいけません。



//条件
//すべてのテストケースで以下の条件を満たします。
//1 ≦ a, b, c ≦ 30
//1 ≦ N ≦ 180
//h_i:m_i は 6:00 から 8:59 の間の時刻
//
//時刻 (h_1:m_1), (h_2:m_2), ..., (h_N:m_N) は早い順に並んでいます。また、同じ時刻に発車する電車は存在しません。
//遅刻せずに出社することができる電車が、少なくとも 1 本は存在します。



//入力例1
//30 30 10
//3
//6 0
//7 0
//8 0
//出力例1
//07:30
//入力例2
//25 30 30
//2
//7 20
//8 0
//出力例2
//06:55
//入力例3
//10 10 10
//6
//8 5
//8 15
//8 25
//8 35
//8 45
//8 55
//出力例3
//08:25