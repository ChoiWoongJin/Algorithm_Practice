package problem.Japan.choi;

import java.util.*;

public class DigitalCalculator {
    public static void main(String[] args) {
        // 自分の得意な言語で
        // Let's チャレンジ！！

        Scanner sc = new Scanner(System.in);
        int W = Integer.parseInt(sc.next());
        char[][] A = new char[8][W];
        char[][] B = new char[8][W];
        char[][] C = new char[8][W];
        long getA = 0, getB = 0, getC = 0;
        
        for(int i=0; i < 8; i++) {
            A[i] = sc.next().toCharArray();
        }
        for(int i=0; i < 8; i++) {
            B[i] = sc.next().toCharArray();
        }
        
        for(int i=0; i < W; i++) {
            getA = getA*10 + charToInt(A, i);
            getB = getB*10 + charToInt(B, i);
        }
        getC = getA + getB;
        
        char[] temp = new char[8];
        long get = 0;
        for(int i=W-1; i >= 0; i--) {
            get = getC%10;
            getC = getC/10;
            temp = longToString(get).toCharArray();
            for(int j=0; j < 8; j++) {
                C[j][i] = temp[j];
            }
        }
        
        for(int i=0; i < 8; i++) {
            System.out.println(C[i]);
        }

    }
    
    public static int charToInt(char[][] input, int n) {
        int result = 0;
        String check = "";
        
        for(int i=0; i < 8; i++) {
            check = check + Character.toString(input[i][n]);
        }
        
        
        // 0 : *|=|****
        // 1 : *|=*|***
        // 2 : *|=**|**
        // 3 : *|=***|*
        // 4 : *|=****|
        // 5 : |*=|****
        // 6 : |*=*|***
        // 7 : |*=**|**
        // 8 : |*=***|*
        // 9 : |*=****|
        
        
        if(check.equals("*|=|****")) {
            result = 0;
        }else if(check.equals("*|=*|***")) {
            result = 1;   
        }else if(check.equals("*|=**|**")) {
            result = 2;   
        }else if(check.equals("*|=***|*")) {
            result = 3;   
        }else if(check.equals("*|=****|")) {
            result = 4;   
        }else if(check.equals("|*=|****")) {
            result = 5;   
        }else if(check.equals("|*=*|***")) {
            result = 6;   
        }else if(check.equals("|*=**|**")) {
            result = 7;   
        }else if(check.equals("|*=***|*")) {
            result = 8;   
        }else if(check.equals("|*=****|")) {
            result = 9;   
        }
        
        return result;
    }
    
    public static String longToString(long n) {
        String result = "";
        
        if(n == 0) {
            result = "*|=|****";
        }else if(n == 1) {
            result = "*|=*|***";
        }else if(n == 2) {
            result = "*|=**|**";
        }else if(n == 3) {
            result = "*|=***|*";
        }else if(n == 4) {
            result = "*|=****|";
        }else if(n == 5) {
            result = "|*=|****";
        }else if(n == 6) {
            result = "|*=*|***";
        }else if(n == 7) {
            result = "|*=**|**";
        }else if(n == 8) {
            result = "|*=***|*";
        }else if(n == 9) {
            result = "|*=****|";
        }
        
        return result;
    }
}

//日本にはそろばんという伝統的なデジタル計算機があります。そろばんでの足し算をシミュレーションするプログラムを書いてみましょう。
//
//この問題では、そろばんを以下のような長さ W の 8 行から成る文字列で表現することにします。例えば W = 6 の場合は以下の様な文字列となります。
//
//
//******
//||||||
//======
//||||||
//******
//******
//******
//******
//
//ここで、"*" はそろばんの珠を、"|" (半角縦棒) は珠が存在しない部分を、"=" は珠が移動できない部分を表します。そろばんを表す文字列の 3 行目は全て "=" であり、逆に "=" は 3 行目以外に存在しません。
//また、W 個の各列にはちょうど 5 個の珠が存在しており、そのうち 1 個は "=" より上に、4 個は "=" より下に存在しています。各列の珠は "=" を跨がない限り、その列内を上下に自由に動くことが出来ます。
//従って、以下の例もそろばんを表す正しい文字列です。
//
//
//|*|***
//*|*|||
//======
//*|*|*|
//****|*
//******
//**|***
//|*****
//
//長さ W のそろばんは十進数 W 桁の非負整数 N を表しています。
//そろばんの各列の状態と数字の対応関係は以下のようになっており、そろばんの左から i 列目 (1 ≦ i ≦ W) の状態が N について 0 埋め W 桁としたときの最上位の桁から i 桁目の数字にそれぞれ対応しています。
//例えば上記の例では左から順に 9, 0, 8, 0, 1, 0 なので 908010 を表しています。 もし各状態が左から順に 0, 0, 3, 1, 5, 0 であればこれは 3150 を表します。
//
//0 1 2 3 4 5 6 7 8 9
//* * * * * | | | | |
//| | | | | * * * * *
//= = = = = = = = = =
//| * * * * | * * * *
//* | * * * * | * * *
//* * | * * * * | * *
//* * * | * * * * | *
//* * * * | * * * * |
//
//昔の日本人は、そろばん上での珠の移動を繰り返すことで桁の大きな数の足し算や引き算、掛け算などの計算を行ってきました。
//長さ W のそろばんを表す文字列が 2 つ入力されるので、その和を表すそろばんの文字列を出力するプログラムを書いて下さい。
//各種記号は上記のものをコピーアンドペーストすることを推奨します。
//
//入力例1を図で表すと以下のようになります。


//入力される値
//入力は以下のフォーマットで与えられます。
//
//W
//(A)
//(B)
//
//・1 行目にはそろばんの長さを表す整数 W が入力されます。
//・続く 8 行では、問題文で指定したフォーマットに整合した長さ W のそろばんを表す文字列 (A) が入力されます。
//・さらに続く 8 行でも、同様に長さ W のそろばんを表す文字列 (B) が入力されます。
//・入力は合計で 17 行となり、入力値最終行の末尾に改行が１つ入ります。
//
//文字列は標準入力から渡されます。標準入力からの値取得方法はこちらをご確認ください



//期待する出力
//期待する出力は 8 行から成ります。(A) と (B) の和を表現している長さ W のそろばんの文字列を問題文中に与えたフォーマットで出力して下さい。
//
//最後は改行し、余計な文字、空行を含んではいけません。



//条件
//すべてのテストケースで以下の条件を満たします。
//
//・1 ≦ W ≦ 18
//・(A) と (B) は上記のそろばんのフォーマットに整合した 8 行の長さ W の文字列
//・(A) と (B) の表す整数の和は十進数で W 桁を超えない



//入力例1
//6
//**|***
//||*|||
//======
//*|*|*|
//****|*
//******
//**|***
//|*****
//**|***
//||*|||
//======
//||*|*|
//****|*
//******
//**|***
//******
//出力例1
//**|***
//||*|||
//======
//***|*|
//*||***
//****|*
//******
//|*****
//入力例2
//10
//***|*||||*
//|||*|****|
//==========
//|***|**||*
//*|********
//*****|***|
//**|*******
//***|**|***
//||||||||*|
//********|*
//==========
//*|**|*****
//|*********
//******|***
//**||*|*|*|
//********|*
//出力例2
//||*||||***
//**|****|||
//==========
//********||
//|***||****
//*|||**|***
//**********
//*******|**